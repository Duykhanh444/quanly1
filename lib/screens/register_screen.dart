import 'package:flutter/material.dart';
import '../services/api_service.dart';

class RegisterScreen extends StatefulWidget {
  const RegisterScreen({Key? key}) : super(key: key);

  @override
  State<RegisterScreen> createState() => _RegisterScreenState();
}

class _RegisterScreenState extends State<RegisterScreen> {
  final TextEditingController _usernameController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();
  final TextEditingController _emailController = TextEditingController();
  bool _isLoading = false;

  // üîπ H√†m ki·ªÉm tra password h·ª£p l·ªá
  String? _validatePassword(String password) {
    if (password.length < 6) {
      return "‚ö†Ô∏è M·∫≠t kh·∫©u ph·∫£i √≠t nh·∫•t 6 k√Ω t·ª±";
    }
    if (!RegExp(r'[A-Z]').hasMatch(password)) {
      return "‚ö†Ô∏è M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t 1 ch·ªØ in hoa (A-Z)";
    }
    if (!RegExp(r'[a-z]').hasMatch(password)) {
      return "‚ö†Ô∏è M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t 1 ch·ªØ th∆∞·ªùng (a-z)";
    }
    if (!RegExp(r'[0-9]').hasMatch(password)) {
      return "‚ö†Ô∏è M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t 1 s·ªë (0-9)";
    }
    if (!RegExp(r'[!@#$%^&*(),.?":{}|<>]').hasMatch(password)) {
      return "‚ö†Ô∏è M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t 1 k√Ω t·ª± ƒë·∫∑c bi·ªát (!@#\$...)";
    }
    return null; // h·ª£p l·ªá
  }

  Future<void> _dangKy() async {
    final username = _usernameController.text.trim();
    final password = _passwordController.text.trim();
    final email = _emailController.text.trim();

    if (username.isEmpty || password.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text("‚ö†Ô∏è Vui l√≤ng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p v√† m·∫≠t kh·∫©u"),
        ),
      );
      return;
    }

    // Ki·ªÉm tra password theo quy t·∫Øc
    final passwordError = _validatePassword(password);
    if (passwordError != null) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text(passwordError)));
      return;
    }

    if (mounted) setState(() => _isLoading = true);

    final success = await ApiService.dangKy(
      username: username,
      password: password,
      email: email.isEmpty ? null : email,
    );

    if (mounted) setState(() => _isLoading = false);

    if (success) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(const SnackBar(content: Text("‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng")));
      Navigator.pop(context);
    } else {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(const SnackBar(content: Text("‚ùå ƒêƒÉng k√Ω th·∫•t b·∫°i")));
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("ƒêƒÉng k√Ω"),
        backgroundColor: Colors.teal,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            TextField(
              controller: _usernameController,
              decoration: const InputDecoration(
                labelText: "T√™n ƒëƒÉng nh·∫≠p",
                prefixIcon: Icon(Icons.person),
                border: OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 12),
            TextField(
              controller: _passwordController,
              obscureText: true,
              decoration: const InputDecoration(
                labelText: "M·∫≠t kh·∫©u",
                prefixIcon: Icon(Icons.lock),
                border: OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 12),
            TextField(
              controller: _emailController,
              decoration: const InputDecoration(
                labelText: "Email (t√πy ch·ªçn)",
                prefixIcon: Icon(Icons.email),
                border: OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: _isLoading ? null : _dangKy,
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.teal,
                minimumSize: const Size(double.infinity, 50),
              ),
              child: _isLoading
                  ? const CircularProgressIndicator(color: Colors.white)
                  : const Text("ƒêƒÉng k√Ω", style: TextStyle(fontSize: 18)),
            ),
            const SizedBox(height: 20),
            const Text(
              "üîë Quy t·∫Øc m·∫≠t kh·∫©u:\n"
              "‚Ä¢ √çt nh·∫•t 6 k√Ω t·ª±\n"
              "‚Ä¢ C√≥ ch·ªØ in hoa (A-Z)\n"
              "‚Ä¢ C√≥ ch·ªØ th∆∞·ªùng (a-z)\n"
              "‚Ä¢ C√≥ s·ªë (0-9)\n"
              "‚Ä¢ C√≥ k√Ω t·ª± ƒë·∫∑c bi·ªát (!@#...)\n",
              style: TextStyle(color: Colors.black87),
            ),
          ],
        ),
      ),
    );
  }
}
